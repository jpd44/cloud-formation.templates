{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Create a load balanced, auto-scaled sample web site with Apache, Tomcat7 and OpenJDK 1.7 across two availability zones in AWS US East. The auto scaling trigger is based on the CPU utilization of the app and web servers. The web instances are configured behind a public-facing load balancer with a health check on /index.html. The app servers are configured behind an internal load balancer with a health check on 8080:/index.jsp. The group scales up by three instances (to a maximum of nine total instances) when CPU load on one instance surpasses 50%. The group scales down by once instance when CPU load falls below 20%. The static web site is available on port 80 of the load balancer. The web tier proxies port 81 to the app server instances, which listen on port 8080. Instances are accessible from the internet via SSH on port 22. Tomcat and the JDK are installed from UserData (and not baked into the AMI). ",

  "Parameters" : {
    "InstanceType" : {
      "Description" : "Type of EC2 instance to launch",
      "Type" : "String",
      "Default" : "m1.small"
    },
    "AppServerPort" : {
      "Description" : "The TCP port for the Web Server",
      "Type" : "String",
      "Default" : "8080"
    },
    "WebServerPort" : {
      "Description" : "The TCP port for the Web Server",
      "Type" : "String",
      "Default" : "80"
    },
      "KeyName" : {
      "Description" : "The EC2 Key Pair to allow SSH access to the instances",
      "Type" : "String",
      "Default" : "dixonaws"
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "64" },
      "m1.small"    : { "Arch" : "32" },
      "m1.large"    : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" },
      "m2.xlarge"   : { "Arch" : "64" },
      "m2.2xlarge"  : { "Arch" : "64" },
      "m2.4xlarge"  : { "Arch" : "64" },
      "c1.medium"   : { "Arch" : "32" },
      "c1.xlarge"   : { "Arch" : "64" },
      "cc1.4xlarge" : { "Arch" : "64" }
    },
    
    "AWSRegionArch2AMI" : {
      "us-east-1" : { "32" : "ami-6411e20d", "64" : "ami-7a11e213" },
      "us-west-1" : { "32" : "ami-c9c7978c", "64" : "ami-cfc7978a" },
      "eu-west-1" : { "32" : "ami-37c2f643", "64" : "ami-31c2f645" },
      "ap-southeast-1" : { "32" : "ami-66f28c34", "64" : "ami-60f28c32" },
      "ap-northeast-1" : { "32" : "ami-9c03a89d", "64" : "ami-a003a8a1" }
    }
  },

  "Resources" : {
    "WebServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : ["us-east-1a", "us-east-1c", "us-east-1d"],
        "LaunchConfigurationName" : { "Ref" : "WebServerLaunchConfig" },
        "MinSize" : "2",
        "MaxSize" : "4",
        "LoadBalancerNames" : [ { "Ref" : "elb0" } ]
      }
   },

    "WebServerLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : "ami-7c807d14",
        
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["",[
            "#!/bin/bash","\n",          

			"# install apache 2.4 from the AWS repo","\n",
			"# John Dixon, 8-29-2016","\n",
			"# tested with m1.small instance size","\n",

			"# update packages","\n",
			"yum -y update","\n",
			
			"# install tomcat7 and default webapps in /usr/share/tomcat7","\n",
			"yum -y install httpd24","\n",

			"# set the daemon to start automatically","\n",
			"chkconfig --level 345 httpd on","\n",

			"# start the daemon now","\n",
			"apachectl restart","\n",
            			
              "\"\"\n" 
        ]]}},
        
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "InstanceType" : "m1.small"
      }
    },

    "WebServerScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "1"
      }
    },
    "WebServerScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },
      
  "AppServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : ["us-east-1a", "us-east-1c", "us-east-1d"],
        "LaunchConfigurationName" : { "Ref" : "AppServerLaunchConfig" },
        "MinSize" : "3",
        "MaxSize" : "9",
        "LoadBalancerNames" : [ { "Ref" : "elb1" } ]
      }
   },

    "AppServerLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : "ami-7c807d14",
        
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["",[
            "#!/bin/bash","\n",          

			"# install openjdk and tomcat7 from the AWS repo","\n",
			"# John Dixon, 8-29-2016","\n",
			"# tested with m1.small instance size","\n",

			"# update packages","\n",
			"yum -y update","\n",

			"# install the JDK","\n",
			"yum -y install java-1.7.0-openjdk-devel","\n",

			"# install tomcat7 and default webapps in /usr/share/tomcat7","\n",
			"yum -y install tomcat7 tomcat7-webapps tomcat7-docs-webapp tomcat7-admin-webapps","\n",

			"# set the daemon to start automatically","\n",
			"chkconfig --level 345 tomcat7 on","\n",

			"# start the daemon now","\n",
			"service tomcat7 start","\n",

			"# add a user to the tomcat configuration","\n",
			"echo '<tomcat-users>' > /usr/share/tomcat7/conf/tomcat-users.xml","\n",
			"echo '<user username=\"root\" password=\"1loveamazon!\" roles=\"admin-gui,manager-gui,manager-status\"/>' >> /usr/share/tomcat7/conf/tomcat-users.xml","\n",

			"echo '</tomcat-users>' >> /usr/share/tomcat7/conf/tomcat-users.xml","\n",
                  "\"\"\n" ]]}},
        
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "InstanceType" : "m1.small"
      }
    },

    "AppServerScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "AppServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "3"
      }
    },
    "AppServerScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "AppServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },

    "CPUAlarmHigh": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-up if CPU > 50% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "50",
        "AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "AppServerGroup" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    
    "CPUAlarmLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-down if CPU < 20% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "20",
        "AlarmActions": [ { "Ref": "WebServerScaleDownPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "AppServerGroup" }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },

    "elb0" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : { "Ref" : "WebServerPort" },
          "Protocol" : "HTTP"
        } ],
        "HealthCheck" : {
          "Target" : { "Fn::Join" : [ "", ["HTTP:", { "Ref" : "AppServerPort" }, "/"]]},
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
    },
      
    "elb1" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "Listeners" : [ {
          "LoadBalancerPort" : "81",
          "InstancePort" : { "Ref" : "AppServerPort" },
          "Protocol" : "HTTP"
        } ],
        "HealthCheck" : {
          "Target" : { "Fn::Join" : [ "", ["HTTP:", { "Ref" : "AppServerPort" }, "/"]]},
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access and HTTP access on the inbound port",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : "0.0.0.0/0"
        }]
        
      }
    },
    
    "AppServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP 8080 access from elb1",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "8080",
          "ToPort" : "8080",
          "CidrIp" : "0.0.0.0/0"
        }]
        
      }
    },
    
    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP 80 and 81 access from the internet",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "81",
          "CidrIp" : "0.0.0.0/0"
        }]
        
      }
    }      
  },

  "Outputs" : {
    "URL" : {
      "Description" : "The URL of the public-facing web sever load balancer",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "elb0", "DNSName" ]}]]}
    }
  }
}
